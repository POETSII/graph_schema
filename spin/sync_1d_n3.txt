byte pending;

proctype Fork(chan in; chan outA; chan outB)
{
    byte got;
    bit pendingA=0;
    bit pendingB=0;
    do
        :: pending==0 -> break;
        :: !(pendingA||pendingB) -> {
            if
            :: in ? got -> { pendingA=1; pendingB=1; };
            :: else -> skip;
            fi
            };
        :: pendingA -> {
            if
            :: outA ! got -> {pendingA=0; }
            :: else -> skip;
            fi
            };
        :: pendingB -> {
            if
            :: outB ! got -> {pendingB=0;}
            :: else -> skip;
            fi
            };
    od
}

proctype Connect(chan in; chan out)
{
    byte got;
    do
    :: pending==0 -> break;
    :: in ? got -> end: out ! got;
    od
}

proctype Cell(byte id; byte nhood; chan in; chan out)
{
    byte t=0;
    byte cs=nhood;
    byte ns=0;
    byte got;

    do
    :: t <= 4 
        printf("id=%u, t=%u, cs=%u, ns=%u\n", id, t, cs, ns);
        if
        ::  atomic {
            cs==nhood;
            t = t + 1;
            out ! t;
            cs=ns;
            ns=0;
            }
        ::  atomic {
            in ? got;
            if
            :: got==t -> { assert(cs<nhood); cs=cs+1; }
            :: got==t+1 -> {assert(ns<nhood); ns=ns+1; }
            :: else -> assert(0);
            fi
            }
        fi
    ::  else -> { pending=pending-1; break }
    od
}

init {
    chan cIn[3] = [1] of {byte};
    chan cOut[3] = [1] of {byte};
    
    pending=3;

    
    run Cell(0, 1, cIn[0], cOut[0]);
    run Cell(1, 2, cIn[1], cOut[1]);
    run Cell(2, 1, cIn[2], cOut[2]);
    
    run Connect(cOut[0], cIn[1]);
    run Fork(cOut[1], cIn[0], cIn[2]);
    run Connect(cOut[2], cIn[1]);
}
