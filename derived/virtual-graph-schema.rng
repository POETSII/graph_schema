<?xml version="1.0" encoding="UTF-8"?>
<grammar ns="http://TODO.org/POETS/virtual-graph-schema-v0" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <element name="Graph">
      <zeroOrMore>
        <choice>
          <ref name="graphType"/>
          <ref name="graphTypeReference"/>
        </choice>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="graphInstance"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="graphSnapshot"/>
      </zeroOrMore>
    </element>
  </start>
  <define name="graphType">
    <element name="GraphType">
      <interleave>
        <attribute name="id">
          <a:documentation>Identifier or name for the graph.</a:documentation>
          <data type="string" datatypeLibrary=""/>
        </attribute>
        <optional>
          <attribute name="nativeDimension">
            <a:documentation>Gives the native dimension of the problem, if there is one. Zero if not set of if not applicable.
For example in a 2D heat equation this would be 2.</a:documentation>
            <data type="integer"/>
          </attribute>
        </optional>
        <optional>
          <element name="SharedCode">
            <text/>
          </element>
        </optional>
        <optional>
          <element name="Properties">
            <a:documentation>Global properties that are shared with all nodes at run-time. read-only.</a:documentation>
            <zeroOrMore>
              <ref name="typedDataSpec"/>
            </zeroOrMore>
          </element>
        </optional>
        <element name="EdgeTypes">
          <a:documentation>Establishes the different types of edges that could exist in the graph,
and any properties or state associated with each edge type</a:documentation>
          <zeroOrMore>
            <ref name="edgeType"/>
          </zeroOrMore>
        </element>
        <element name="DeviceTypes">
          <a:documentation>This establishes the shapes of devices, though not the internals.</a:documentation>
          <zeroOrMore>
            <ref name="deviceType"/>
          </zeroOrMore>
        </element>
      </interleave>
    </element>
  </define>
  <define name="graphTypeReference">
    <element name="GraphTypeReference">
      <a:documentation>This is used when we want the graph type to live in a different file, or
to use a graph-type that is defined by a software provider</a:documentation>
      <attribute name="id">
        <data type="string" datatypeLibrary=""/>
      </attribute>
      <optional>
        <attribute name="src">
          <a:documentation>This may be missing, in which case it is assumed some other mechanism will
connect it up</a:documentation>
          <data type="string" datatypeLibrary=""/>
        </attribute>
      </optional>
    </element>
  </define>
  <define name="graphInstance">
    <element name="GraphInstance">
      <attribute name="id">
        <data type="string" datatypeLibrary=""/>
      </attribute>
      <attribute name="graphTypeId">
        <a:documentation>The graph type must have been declared using either a GraphType or a GraphTypeReference</a:documentation>
        <data type="string" datatypeLibrary=""/>
      </attribute>
      <optional>
        <element name="Properties">
          <ref name="typedDataValue"/>
        </element>
      </optional>
      <element name="DeviceInstances">
        <zeroOrMore>
          <ref name="deviceInstance"/>
        </zeroOrMore>
      </element>
      <element name="EdgeInstances">
        <zeroOrMore>
          <ref name="edgeInstance"/>
        </zeroOrMore>
      </element>
    </element>
  </define>
  <define name="edgeType">
    <element name="EdgeType">
      <a:documentation>An edge type captures a type of communication that could happen between ports</a:documentation>
      <attribute name="id">
        <a:documentation>Must be unique amongst all edge types</a:documentation>
        <data type="string" datatypeLibrary=""/>
      </attribute>
      <optional>
        <element name="Message">
          <a:documentation>The type of messages that are sent over this edge. This may not exist
(e.g. if it is only a pulse)</a:documentation>
          <zeroOrMore>
            <ref name="typedDataSpec"/>
          </zeroOrMore>
        </element>
      </optional>
      <optional>
        <element name="Properties">
          <a:documentation>Indicates read-only properties associated with each edge. This will be
delivered along-side messages which arrive along that edge
An edge may have no properties, in which case this element will not exist</a:documentation>
          <zeroOrMore>
            <ref name="typedDataSpec"/>
          </zeroOrMore>
        </element>
      </optional>
      <optional>
        <element name="State">
          <a:documentation>Indicates mutable properties associated with an edge.
TODO : This has unclear semantics (which is why I (DBT) was hesitant about it).
       When is the state modifiable, is it _only_ when a message arrives over
       that edge? Should there be state associated with outgoing edges?</a:documentation>
          <zeroOrMore>
            <ref name="typedDataSpec"/>
          </zeroOrMore>
        </element>
      </optional>
    </element>
  </define>
  <define name="deviceType">
    <element name="DeviceType">
      <a:documentation>A device type captures a piece of structure and functionality that can
be instantiated within the graph. All devices of the same type are identical
except for the functionality they have.

The number of ports must be fixed, but we allow a variable number of
edges to enter or leave a node. Alongside the edge properties and
edge state this provides storage that scales with the number of edges.

Messages are delivered to the device in any order, and a device has no
way of avoiding them.

Devices can request a send on a particular port NAME by setting requestSend_NAME.
The value of requestSend_NAME will persist between calls until a send is
achieved on a particular port.</a:documentation>
      <attribute name="id">
        <a:documentation>Must be unique amongst all device types</a:documentation>
        <data type="string" datatypeLibrary=""/>
      </attribute>
      <optional>
        <element name="Properties">
          <a:documentation>Read-only properties that could be specified on the device. This element
may not appear if the device has no properties. There may be default
values specified for some or all components of the properties.</a:documentation>
          <ref name="typedDataSpec"/>
        </element>
      </optional>
      <optional>
        <element name="State">
          <a:documentation>Mutable properties attached to the device. In principle this element might
not appear, if the device has no state (I suppose all the mutable state could
be in the edge properties).</a:documentation>
          <zeroOrMore>
            <ref name="typedDataSpec"/>
          </zeroOrMore>
        </element>
      </optional>
      <zeroOrMore>
        <element name="InputPort">
          <a:documentation>Zero or more input ports that appear on the device type.</a:documentation>
          <attribute name="name">
            <a:documentation>Name of the port, must be unique within the device type</a:documentation>
            <data type="string" datatypeLibrary=""/>
          </attribute>
          <attribute name="edgeTypeId">
            <a:documentation>Identifies the edge type for this port (specifying properties+state space)
A port can only be connected to an edge of the same type (not just structurally,
they must have the same edgeTypeId)</a:documentation>
            <data type="string" datatypeLibrary=""/>
          </attribute>
          <element name="OnReceive">
            <a:documentation>Event handler for when a message arrives on this device. The body will
be a fragment of C. It should probably be wrapped in a CDATA section,
but that is up to you. The code should be a statement or sequence of
statements, and does not contain any function header.

Rationale: why a fragment? It forces the implementer to not use globals etc.,
and means we have control over the type names of the various structs.
TODO: I (DBT) am not convinced that using fragments is a good idea (this
is true even as I specify it). Using a reference to functions in the C
code would make much more sense.

Variables which will be in scope are:
  graphProperties : Read-only pointer to the graph properties
  deviceProperties : Read-only pointer to the device state
  deviceState : Mutable pointer to the device state
  edgeProperties : Read-only pointer to the edge state
  edgeState : Mutable pointer to the edge state
  message : Read-only pointer to the message payload
  requestSend[] : an array of booleans which requests sending on the named port (one bool for each output port)</a:documentation>
            <data type="string" datatypeLibrary=""/>
          </element>
        </element>
      </zeroOrMore>
      <zeroOrMore>
        <element name="OutputPort">
          <a:documentation>Zero or more output ports that appear on the device type.</a:documentation>
          <attribute name="name">
            <a:documentation>Name of the port, must be unique within the device type</a:documentation>
            <data type="string" datatypeLibrary=""/>
          </attribute>
          <attribute name="edgeTypeId">
            <a:documentation>Identifies the edge type for this port (specifying properties+state space)
A port can only be connected to an edge of the same type (not just structurally,
they must have the same edgeTypeId)</a:documentation>
            <data type="string" datatypeLibrary=""/>
          </attribute>
          <element name="OnSend">
            <a:documentation>Event handler for sending a message on this device. The body will
be a fragment of C. It should probably be wrapped in a CDATA section,
but that is up to you. The code should be a statement or sequence of
statements, and does not contain any function header.

Variables which will be in scope are:
  graphProperties : Read-only pointer to the graph properties
  deviceProperties : Read-only pointer to the device properties
  deviceState : Mutable pointer to the device state
  requestSend[] : an array of  booleans which requests sending on the named port (one bool for each port)
  message : A mutable pointer to payload associate with the edge
  cancelSend : mutable boolean which is true by default. Set to false to cancel the send.

Whenever requestSend[index] is high, then eventually this handler will get
executed. By default, requestSend[index] will be set low before the handler
executes, but the handler can set it high again if it wants.</a:documentation>
            <data type="string" datatypeLibrary=""/>
          </element>
        </element>
      </zeroOrMore>
    </element>
  </define>
  <define name="deviceInstance">
    <element name="DevI">
      <attribute name="id">
        <a:documentation>A unique string</a:documentation>
        <data type="string" datatypeLibrary=""/>
      </attribute>
      <attribute name="type">
        <a:documentation>Links to a previously declared device type</a:documentation>
        <data type="string" datatypeLibrary=""/>
      </attribute>
      <optional>
        <attribute name="nativeLocation">
          <a:documentation>If the device has a natural location (e.g. in the problem space), then this gives it.
The format is decimal values seperated by commas. The number of values should follow
the native dimension of the graph type.</a:documentation>
          <data type="string" datatypeLibrary=""/>
        </attribute>
      </optional>
      <optional>
        <element name="P">
          <a:documentation>Read-only properties associated with this device instance.
This element must not exist if the device type has no properties
This element may not exist if the property has a (complete) default value</a:documentation>
          <ref name="typedDataValue"/>
        </element>
      </optional>
    </element>
  </define>
  <define name="edgeInstance">
    <element name="EdgeI">
      <a:documentation>The edgeTypeId can be inferred from the types of the ports,
and it is worth explicitly checking they have the same port on
load, so it is not included here.</a:documentation>
      <choice>
        <group>
          <attribute name="dstDeviceId">
            <data type="string"/>
          </attribute>
          <attribute name="dstPortName">
            <data type="string"/>
          </attribute>
          <attribute name="srcDeviceId">
            <data type="string"/>
          </attribute>
          <attribute name="srcPortName">
            <data type="string"/>
          </attribute>
        </group>
        <attribute name="path">
          <a:documentation>A string of the form "dstDeviceId:dstPortName-srcDeviceId:srcPortName"</a:documentation>
          <data type="string"/>
        </attribute>
      </choice>
      <optional>
        <element name="P">
          <a:documentation>Read-only properties associated with this edge instance
This element can only exist if the edge has properties.
This edge may not exist if all properties have a default</a:documentation>
          <ref name="typedDataValue"/>
        </element>
      </optional>
      <optional>
        <element name="S">
          <a:documentation>Mutable properties associated with this edge instance.
This element can only exist if the edge has state
This edge may not exist if all parts of the state have a default.</a:documentation>
          <ref name="typedDataValue"/>
        </element>
      </optional>
    </element>
  </define>
  <define name="typedDataSpec">
    <a:documentation>A typed data specification consists of one or more elements</a:documentation>
    <oneOrMore>
      <ref name="typedDataSpecElement"/>
    </oneOrMore>
  </define>
  <define name="typedDataSpecElement">
    <choice>
      <a:documentation>This represents the prototype for a typed piece of data, along with
the default values</a:documentation>
      <element name="Scalar">
        <attribute name="type">
          <choice>
            <value>int32_t</value>
            <value>uint32_t</value>
            <value>float</value>
            <value>bool</value>
          </choice>
        </attribute>
        <attribute name="name">
          <data type="string" datatypeLibrary=""/>
        </attribute>
        <optional>
          <attribute name="value">
            <data type="string" datatypeLibrary=""/>
          </attribute>
        </optional>
      </element>
      <element name="Tuple">
        <attribute name="name"/>
        <oneOrMore>
          <ref name="typedDataSpecElement"/>
        </oneOrMore>
      </element>
      <element name="Array">
        <attribute name="name"/>
        <attribute name="length"/>
        <attribute name="type">
          <a:documentation>TODO : this should be made more general. Currently only arrays of scalars are allowed</a:documentation>
          <choice>
            <value>int32_t</value>
            <value>uint32_t</value>
            <value>float</value>
            <value>bool</value>
          </choice>
        </attribute>
      </element>
    </choice>
  </define>
  <define name="typedDataValue">
    <a:documentation>Typed data is encoded in plain text, rather than using XML in order
to keep ADB happy.
The encoding is simply "name":value, with name-value pairs seperated by commas.

Tuples are encoded as "name":{ "sub-name":value, ... }
Arrays are encoded as "name":[value,value,...]

Any relationship to JSON is entirely intentional. I realise there is an irony
in using XML on the outside and JSON on the inside - personally I (DBT) prefer the
self-checking structure of XML at the large scale.</a:documentation>
    <text/>
  </define>
  <define name="graphSnapshot">
    <element name="GraphSnapshot">
      <attribute name="graphId">
        <data type="string" datatypeLibrary=""/>
      </attribute>
      <attribute name="sequenceId">
        <a:documentation>The id of the overall run that the snapshot comes from</a:documentation>
        <data type="string" datatypeLibrary=""/>
      </attribute>
      <attribute name="sequenceNumber">
        <a:documentation>The integer sequence number within the run</a:documentation>
        <data type="integer"/>
      </attribute>
      <attribute name="worldTime">
        <a:documentation>The "world-time" of the simulator, whatever that may mean</a:documentation>
        <data type="float"/>
      </attribute>
      <element name="DevS">
        <attribute name="id">
          <data type="string" datatypeLibrary=""/>
        </attribute>
        <attribute name="rts">
          <a:documentation>A hexadecimal value that encodes whether each port is ready to send.
The LSB encodes the port with index 0, and so on</a:documentation>
          <data type="string" datatypeLibrary=""/>
        </attribute>
        <optional>
          <element name="S">
            <ref name="typedDataValue"/>
          </element>
        </optional>
      </element>
      <element name="EdgeS">
        <!-- id of the form:  "dstDeviceId:dstPortName-srcDeviceId:srcPortName" -->
        <attribute name="id">
          <data type="string" datatypeLibrary=""/>
        </attribute>
        <optional>
          <!-- How many times has this edge fired? -->
          <attribute name="firings">
            <data type="integer"/>
          </attribute>
        </optional>
        <optional>
          <element name="S">
            <ref name="typedDataValue"/>
          </element>
        </optional>
        <optional>
          <element name="Q">
            <a:documentation>Any messages that are in flight</a:documentation>
            <oneOrMore>
              <element name="M">
                <ref name="typedDataValue"/>
              </element>
            </oneOrMore>
          </element>
        </optional>
      </element>
    </element>
  </define>
</grammar>
