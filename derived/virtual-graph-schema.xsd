<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="TODO/POETS/virtual-graph-schema-v0" xmlns:v="TODO/POETS/virtual-graph-schema-v0">
  <xs:element name="Graph">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="Properties">
          <xs:annotation>
            <xs:documentation>Global properties that are shared with all nodes. read-only.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:group ref="v:dataType"/>
          </xs:complexType>
        </xs:element>
        <xs:element ref="v:EdgeTypes"/>
        <xs:element ref="v:DeviceTypes"/>
        <xs:element ref="v:DeviceInstances"/>
        <xs:element ref="v:EdgeInstances"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:string">
        <xs:annotation>
          <xs:documentation>Identifier or name for the graph. Doesn't need to exist.</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="EdgeTypes">
    <xs:annotation>
      <xs:documentation>Establishes the different types of edges that could exist in the graph,
and any properties or state associated with each edge type</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="v:EdgeType"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeviceTypes">
    <xs:annotation>
      <xs:documentation>This establishes the shapes of devices, though not the internals.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="v:DeviceType"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeviceInstances">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="v:DeviceInstance"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="EdgeInstances">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="v:EdgeInstance"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="EdgeType">
    <xs:annotation>
      <xs:documentation>An edge type captures a type of communication that could happen between ports</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="v:Message"/>
        <xs:element minOccurs="0" name="Properties">
          <xs:annotation>
            <xs:documentation>Indicates read-only properties associated with each edge. This will be
delivered along-side messages which arrive along that edge
An edge may have no properties, in which case this element will not exist</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:group ref="v:dataType"/>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="State">
          <xs:annotation>
            <xs:documentation>Indicates mutable properties associated with an edge.
TODO : This has unclear semantics (which is why I (DBT) was hesitant about it).
       When is the state modifiable, is it _only_ when a message arrives over
       that edge? Should there be state associated with outgoing edges?</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:group ref="v:dataType"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="id" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Must be unique amongst all edge types</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="Message">
    <xs:annotation>
      <xs:documentation>The type of messages that are sent over this edge. This may not exist
(e.g. if it is only a pulse)</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:group ref="v:dataType"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="DeviceType">
    <xs:annotation>
      <xs:documentation>A device type captures a piece of structure and functionality that can
be instantiated within the graph. All devices of the same type are identical
except for the functionality they have.

The number of ports must be fixed, but we allow a variable number of
edges to enter or leave a node. Alongside the edge properties and
edge state this provides storage that scales with the number of edges.

Messages are delivered to the device in any order, and a device has no
way of avoiding them.

Devices can request a send on a particular port NAME by setting requestSend_NAME.
The value of requestSend_NAME will persist between calls until a send is
achieved on a particular port.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="Properties">
          <xs:annotation>
            <xs:documentation>Read-only properties that could be specified on the device. This element
may not appear if the device has no properties. There may be default
values specified for some or all components of the properties.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:group ref="v:dataType"/>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="State">
          <xs:annotation>
            <xs:documentation>Mutable properties attached to the device. In principle this element might
not appear, if the device has no state (I suppose all the mutable state could
be in the edge properties).</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:group ref="v:dataType"/>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="v:InputPort"/>
        <xs:element minOccurs="0" maxOccurs="unbounded" ref="v:OutputPort"/>
      </xs:sequence>
      <xs:attribute name="id" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Must be unique amongst all device types</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="InputPort">
    <xs:annotation>
      <xs:documentation>Zero or more input ports that appear on the device type.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="v:OnReceive"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the port, must be unique within the device type</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="edgeTypeId" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Identifies the edge type for this port (specifying properties+state space)
A port can only be connected to an edge of the same type (not just structurally,
they must have the same edgeTypeId)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="OnReceive" type="xs:string">
    <xs:annotation>
      <xs:documentation>Event handler for when a message arrives on this device. The body will
be a fragment of C. It should probably be wrapped in a CDATA section,
but that is up to you. The code should be a statement or sequence of
statements, and does not contain any function header.

Rationale: why a fragment? It forces the implementer to not use globals etc.,
and means we have control over the type names of the various structs.
TODO: I (DBT) am not convinced that using fragments is a good idea (this
is true even as I specify it). Using a reference to functions in the C
code would make much more sense.

Variables which will be in scope are:
  deviceProperties : Read-only pointer to the device state
  deviceState : Mutable pointer to the device state
  edgeProperties : Read-only pointer to the edge state
  edgeState : Mutable pointer to the edge state
  messageData : Read-only pointer to the message payload
  requestSend[] : an array of booleans which requests sending on the named port (one bool for each output port)</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="OutputPort">
    <xs:annotation>
      <xs:documentation>Zero or more output ports that appear on the device type.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="v:OnSend"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the port, must be unique within the device type</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="edgeTypeId" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Identifies the edge type for this port (specifying properties+state space)
A port can only be connected to an edge of the same type (not just structurally,
they must have the same edgeTypeId)</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="OnSend" type="xs:string">
    <xs:annotation>
      <xs:documentation>Event handler for sending a message on this device. The body will
be a fragment of C. It should probably be wrapped in a CDATA section,
but that is up to you. The code should be a statement or sequence of
statements, and does not contain any function header.

Variables which will be in scope are:
  deviceProperties : Read-only pointer to the device state
  deviceState : Mutable pointer to the device state
  requestSend[] : an array of  booleans which requests sending on the named port (one bool for each port)
  messageData : A mutable pointer to payload associate with the edge
  cancelSend : mutable boolean which is true by default. Set to false to cancel the send.

Whenever requestSend[index] is high, then eventually this handler will get
executed. By default, requestSend[index] will be set low before the handler
executes, but the handler can set it high again if it wants.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="DeviceInstance">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="Properties">
          <xs:annotation>
            <xs:documentation>Read-only properties associated with this device instance.
This element must not exist if the device type has no properties
This element may not exist if the property has a (complete) default value</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:group ref="v:dataValue"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="id" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>A unique string</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="deviceTypeId" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Links to a previously declared device type</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="EdgeInstance">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" name="Properties">
          <xs:annotation>
            <xs:documentation>Read-only properties associated with this edge instance
This element can only exist if the edge has properties.
This edge may not exist if all properties have a default</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:group ref="v:dataValue"/>
          </xs:complexType>
        </xs:element>
        <xs:element minOccurs="0" name="State">
          <xs:annotation>
            <xs:documentation>Mutable properties associated with this edge instance.
This element can only exist if the edge has state
This edge may not exist if all parts of the state have a default.</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:group ref="v:dataValue"/>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attribute name="dstDeviceId" use="required" type="xs:string"/>
      <xs:attribute name="dstPortName" use="required" type="xs:string"/>
      <xs:attribute name="srcDeviceId" use="required" type="xs:string"/>
      <xs:attribute name="srcPortName" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>
  <xs:group name="dataType">
    <xs:choice>
      <xs:element name="Int32">
        <xs:complexType>
          <xs:attribute name="name" use="required" type="xs:string"/>
          <xs:attribute name="default" type="xs:integer"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="Float32">
        <xs:complexType>
          <xs:attribute name="name" use="required" type="xs:string"/>
          <xs:attribute name="default" type="xs:float"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="Bool">
        <xs:complexType>
          <xs:attribute name="name" use="required" type="xs:string"/>
          <xs:attribute name="default"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="Tuple">
        <xs:complexType>
          <xs:group minOccurs="0" maxOccurs="unbounded" ref="v:dataType"/>
          <xs:attribute name="name" use="required"/>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
  <xs:group name="dataValue">
    <xs:choice>
      <xs:element name="Int32">
        <xs:complexType>
          <xs:attribute name="name" use="required" type="xs:string"/>
          <xs:attribute name="value" use="required" type="xs:integer"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="Float32">
        <xs:complexType>
          <xs:attribute name="name" use="required" type="xs:string"/>
          <xs:attribute name="value" use="required" type="xs:float"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="Bool">
        <xs:complexType>
          <xs:attribute name="name" use="required" type="xs:string"/>
          <xs:attribute name="value" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="true"/>
                <xs:enumeration value="false"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
      <xs:element name="Tuple">
        <xs:complexType>
          <xs:group minOccurs="0" maxOccurs="unbounded" ref="v:dataValue"/>
          <xs:attribute name="name" use="required"/>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:group>
</xs:schema>
