<?xml version="1.0"?>
<Graph xmlns="http://TODO.org/POETS/virtual-graph-schema-v0">
  <GraphType id="heat" nativeDimension="2">   <!--TODO : Should be a unique id-->
    <Properties>
      <Scalar type="float" name="fireThreshold" value="0.1" />
    </Properties>
    
    <EdgeTypes>
      <EdgeType id="__init__">
	<!-- This doesn't have any properties -->
      </EdgeType>
      
      <EdgeType id="conductor">
	<Properties>
	  <Scalar type="float" name="conductance" value="0.5" />
	</Properties>
	<State>
	  <Scalar type="float" name="ghost" value="0.0" />
	</State>
	<Message>
	  <Scalar type="float" name="temperature" />
	</Message>      
      </EdgeType>
    </EdgeTypes>
  
    <DeviceTypes>
      <DeviceType id="region">
	<Properties>
	  <Scalar type="bool" name="isFixed" value="0" />
	  <Scalar type="float" name="initialTemp" value="0" />
	</Properties>
	
	<State>
	  <Scalar type="float" name="currTemp" value="0" />
	  <Scalar type="float" name="lastFiredTemp" value="0" />
	</State>

	<InputPort name="__init__" edgeTypeId="__init__">
	  <OnReceive><![CDATA[
	  handler_log(2, "fireThreshold = %f", graphProperties->fireThreshold);
	  handler_log(2,"fixed = %d, initialTemperature = %f", deviceProperties->isFixed, deviceProperties->initialTemp);
	  
	  deviceState->currTemp = deviceProperties->initialTemp;

	  // Force the node into a firing state, no matter if it gets updates
	  // before it manages its first firing
	  // TODO : this is a hack
	  deviceState->lastFiredTemp = deviceState->currTemp + graphProperties->fireThreshold * 1000000;

	  handler_log(2,"currTemp=%f, lastFiredTemp=%f", deviceState->currTemp, deviceState->lastFiredTemp);

	  // TODO : Bind by name
	  requestSend[0] = true;
	  ]]>
	  </OnReceive>
	</InputPort>
	
	<InputPort name="in" edgeTypeId="conductor">
	  <OnReceive><![CDATA[
	  if(deviceProperties->isFixed){
	    handler_log(2,"fixed, no change.\n");
	    requestSend[0] = false;
	  }else{
	    handler_log(2,"conductance = %f, ghost = %f", edgeProperties->conductance, edgeState->ghost);
	    
	    float oldTemp=deviceState->currTemp;
	    float newTemp=deviceState->currTemp;
	    newTemp -= edgeProperties->conductance * edgeState->ghost;
	    edgeState->ghost = message->temperature;
	    newTemp += edgeProperties->conductance * edgeState->ghost;
	    deviceState->currTemp=newTemp;

	    handler_log(2, "incoming = %f, oldTemp = %f, newTemp = %f", message->temperature, oldTemp, newTemp);

	    float delta=(deviceState->currTemp - deviceState->lastFiredTemp);
	    if(delta<0){
	      delta=-delta;
	      }
	    handler_log(2, "delta = %f, fireThreshold = %g", delta, graphProperties->fireThreshold);

	    // TODO : This should be bound by name, not index
	    requestSend[0] = (delta >= graphProperties->fireThreshold);
	  }
	  ]]></OnReceive>
	</InputPort>

	<OutputPort name="out" edgeTypeId="conductor">
	  <OnSend><![CDATA[
	  float delta=(deviceState->currTemp - deviceState->lastFiredTemp);
	  if(delta<0){
	    delta=-delta;
	  }

	  if(delta < graphProperties->fireThreshold){
	    *cancelSend=true;
	  }else{
	    message->temperature=deviceState->currTemp;
	    deviceState->lastFiredTemp=deviceState->currTemp;
	  }

	  // TODO : Bind by name
	  // Unless something happens, we are now quiescent
	  requestSend[0] = false; // For information; this is the default
	  ]]></OnSend>
	</OutputPort>
      </DeviceType>
    </DeviceTypes>
  </GraphType>
</Graph>
