from typing import *

class dtype:
    def __init__(self, type:Union[str,Type]) -> None: ...
    
double = dtype("double")
uint32 = dtype("uint32")
uint16 = dtype("uint16")
uint8 = dtype("uint8")

_nd_or_scalar = Union[ndarray,float,int]

class ndarray:
    def __init__(self) -> None : ...

    @property
    def shape(self) -> Sequence[int] : ...
    
    @property
    def size(self) -> int : ...
    
    def __getitem__(self,idx:Any) -> ndarray : ...
    
    def __setitem__(self,idx:Any, val:Union[ndarray,float,int,Sequence[Union[float,int]]]) -> ndarray : ...

    # NOTE: This never seems to get picked up
    def __int__(self) -> int : ...
    
    def __iadd__(self, o:_nd_or_scalar) -> None : ...
    
    def __eq__(self,o:Any) -> ndarray : ... # type:ignore
    
    
    def __lt__(self,o:Any) -> ndarray : ...
    
    def __gt__(self,o:Any) -> ndarray : ...
    
    def __add__(self, o:_nd_or_scalar) -> ndarray : ...
    
    def __radd__(self, o:_nd_or_scalar) -> ndarray : ...
    
    def __sub__(self, o:_nd_or_scalar) -> ndarray : ...
    
    def __rsub__(self, o:_nd_or_scalar) -> ndarray : ...
    
    def __mul__(self, o:_nd_or_scalar) -> ndarray : ...
    
    def __rmul__(self, o:_nd_or_scalar) -> ndarray : ...
    
    def __truediv__(self, o:_nd_or_scalar) -> ndarray : ...
    
    def __rtruediv__(self, o:_nd_or_scalar) -> ndarray : ...
    
    def __mod__(self, o:_nd_or_scalar) -> ndarray : ...
    
    def __rmod__(self, o:_nd_or_scalar) -> ndarray : ...
    
    def __pos__(self) -> ndarray : ...
    
    def __neg__(self) -> ndarray : ...
    
    def reshape(self, shape:Sequence[int]) -> ndarray : ...
    
    def all(self) -> bool : ...
    
    def any(self) -> bool : ...
    
    def copy(self) -> ndarray : ...
   
def sqrt(x:ndarray) -> ndarray : ...

def fabs(x:ndarray) -> ndarray : ...

def zeros(shape=Union[int,Sequence[int]], dtype:dtype=double) -> ndarray : ...

def array(data:Any, dtype:dtype=double) -> ndarray : ...

def copyto(dst:ndarray, src:ndarray) -> None : ...
