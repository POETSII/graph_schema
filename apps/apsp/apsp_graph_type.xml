<?xml version="1.0"?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v2">
  <GraphType id="apsp">
	<Documentation><![CDATA[
		Does all-pairs shortest-path on a graph.

        Root sends begin for source 0
        Node source broadcasts distance 0 to neighbours
        Each following node broadcasts to neighbours when distance changes

        In parallel, the root occasionally sends termination sweeps, which sweep
        through the graph and accumulate the total sent+receives messages.
        Once a sweep finishes with sent==receive, a second control sweep passes
        through. If we get sent==receive twice with the same values, then the
        floods have terminated.

        ]]>
	</Documentation>

    <MessageTypes>
      <MessageType id="__init__">
		<Documentation>This doesn't have any properties</Documentation>
      </MessageType>

      <MessageType id="term_request">
	  </MessageType>
      
      <MessageType id="term_response">
		<Documentation>
        </Documentation>
        <Message>
            <Scalar type="uint64_t" name="sent"><Documentation>incoming total sent.</Documentation></Scalar>
            <Scalar type="uint64_t" name="received"><Documentation>incoming total received.</Documentation></Scalar>
            <Scalar type="uint32_t" name="maxDist"><Documentation>maximum dist seen in input cone</Documentation></Scalar>
            <Scalar type="uint32_t" name="sumDist"><Documentation>sum of dist seen in input cone</Documentation></Scalar>
        </Message>
      </MessageType>

      <MessageType id="dist">
		<Documentation>Shares a new distance update with connected nodes</Documentation>
        <Message>
            <Scalar type="uint32_t" name="round"><Documentation>The current round this progress is talking about (mainly for sanity checks)</Documentation></Scalar>
            <Scalar type="uint32_t" name="distance"><Documentation>Distance of sending node from the source for the current round</Documentation></Scalar>
        </Message>
      </MessageType>

      <MessageType id="begin">
        <Documentation>Sent to start the next round</Documentation>
        <Message>
            <Scalar type="uint32_t" name="round"><Documentation>Round that is currently starting, and also the id of the source for that round.</Documentation></Scalar>
        </Message>
      </MessageType>
    </MessageTypes>
    
    <DeviceTypes>
        <DeviceType id="term_fanout">
            <State>
                <Scalar name="ready" type="uint8_t" />
            </State>

            <ReadyToSend><![CDATA[
            *readyToSend = deviceState->ready ? RTS_FLAG_out : 0;
            ]]></ReadyToSend>

            <InputPin name="in" messageTypeId="term_request"><![CDATA[
            deviceState->ready=1;
            ]]></InputPin>

            <OutputPin name="out" messageTypeId="term_request"><![CDATA[
            deviceState->ready=0;
            ]]></OutputPin>
        </DeviceType>

        <DeviceType id="term_fanin">
            <Properties>
                <Scalar name="degree" type="uint32_t" />
            </Properties>

            <State>
                <Scalar name="sent" type="uint64_t" />
                <Scalar name="received" type="uint64_t" />
                <Scalar name="sumDist" type="uint32_t" />
                <Scalar name="maxDist" type="uint32_t" />
                <Scalar name="seen" type="uint32_t" />
            </State>

            <ReadyToSend><![CDATA[
            *readyToSend = deviceState->seen==deviceProperties->degree ? RTS_FLAG_out : 0;
            ]]></ReadyToSend>

            <InputPin name="in" messageTypeId="term_response"><![CDATA[
            assert(deviceState->seen < deviceProperties->degree);
            deviceState->seen++;
            ]]></InputPin>

            <OutputPin name="out" messageTypeId="term_response"><![CDATA[
            message->sent=deviceState->sent;
            message->received=deviceState->received;

            deviceState->seen=0;
            deviceState->sent=0;
            deviceState->received=0;
            ]]></OutputPin>
        </DeviceType>

      <DeviceType id="node">
		<Properties>
		  <Scalar type="uint32_t" name="index"><Documentation>The contiguous index of the graph node</Documentation></Scalar>
          <Scalar type="uint32_t" name="degree"><Documentation>Number of outgoing edges for this node.</Documentation></Scalar>
		</Properties>
		
		<State>
		  <Scalar type="uint32_t" name="round" />
          <Scalar type="uint32_t" name="dist" />
          <Scalar type="uint8_t" name="distDirty"><Documentation>Current distance has changed, but we haven't told neighbours yet.</Documentation></Scalar>
          
          <Scalar type="uint32_t" name="sentCount" />
          <Scalar type="uint32_t" name="receivedCount" />
		</State>
		
		<ReadyToSend><![CDATA[
            if(deviceState->distDirty){
                *readyToSend = OUTPUT_FLAG_dout;
            }else if(deviceState->progressDirty){
                *readyToSend = OUTPUT_FLAG_progress_out;
            }else{
                *readyToSend = 0;
            }
		]]></ReadyToSend>

        <InputPin name="__init__" messageTypeId="__init__">
          <OnReceive><![CDATA[
		  deviceState->round=INT_MAX;
		  ]]></OnReceive>
		</InputPin>

        <InputPin name="term_request" messageTypeId="term_request"><![CDATA[
        assert(!deviceState->termRequest);
        deviceState->termRequest=1;
        ]]></InputPin>

        <OutputPin name="term_response" messageTypeId="term_response"><![CDATA[
        assert(deviceState->termRequest);
        deviceState->termRequest=0;
        message->sent = deviceState->sendCount;
        message->received = deviceState->recvCount;
        ]]></OutputPin>

        <InputPin name="begin_in" messageTypeId="begin">
            <OnReceive><![CDATA[
            if(message->round==deviceProperties->index){
                // It is this device's turn
                deviceState->round=message->round;
                deviceState->version=0;
                deviceState->dist=0; // Start from here
                deviceState->distDirty=true;
                deviceState->sendCount=0;
                deviceState->recvCount=0;
            }
            ]]></OnReceive>
        </InputPin>
		
		<OutputPin name="dout" messageTypeId="dist">
		  <OnSend><![CDATA[
          assert(deviceState->distDirty);

		  message->round = deviceState->round;
          message->distance = deviceState->dist;

          deviceState->distDirty = false;
          deviceState->sendCount += deviceProperties->degree;
          deviceState->progressDirty = true;
		  ]]></OnSend>
		</OutputPin>
		
		<InputPin name="din" messageTypeId="dist">
            <Properties>
                <Scalar type="uint32_t" name="w" default="1" />
            </Properties>
		  <OnReceive><![CDATA[
		  if(message->round!=deviceState->round){
                deviceState->round=message->round;
                deviceState->version=0;
                deviceState->dist=0xFFFFFFFFul;
                deviceState->sendCount=0;
                deviceState->recvCount=0;
                handler_log(2, "New round=%u", message->round);
          }
          auto newDist=message->distance + edgeProperties->w;
          if(newDist < deviceState->dist){
                deviceState->dist = newDist;
                deviceState->distDirty = true;
                handler_log(2, "New dist=%u, ew=%u", deviceState->dist, edgeProperties->w);
          }
          deviceState->recvCount++;
		  ]]></OnReceive>
		</InputPin>

      </DeviceType>


	<DeviceType id="controller">
	  <Properties>
	    <Scalar type="uint32_t" name="node_count"/>
        <Scalar type="uint32_t" name="refSumMaxDist"/>
        <Scalar type="uint32_t" name="refSumSumDist"/>
	  </Properties>
	  
	  <State>

        <Scalar type="uint32_t" name="round" />
        <Scalar type="uint8_t" name="roundComplete" />

        <Scalar type="uint32_t" name="maxDist" />
        <Scalar type="uint32_t" name="sumDist" />

        <Scalar type="uint32_t" name="sumMaxDist" />
        <Scalar type="uint32_t" name="sumSumDist"></Scalar>
	  </State>
	  
	  <ReadyToSend><![CDATA[
      if(deviceState->roundComplete){
            *readyToSend = OUTPUT_FLAG_begin_out;
      }else{
            *readyToSend = 0;
      }
	  ]]></ReadyToSend>

        <InputPin name="__init__" messageTypeId="__init__">
            <OnReceive><![CDATA[
            // trigger first begin message
            deviceState->round=0;
            deviceState->roundComplete=true;
            ]]>
            </OnReceive>
        </InputPin>
	  
	  <InputPin name="term_in" messageTypeId="term_response">
	    <OnReceive><![CDATA[
        
        handler_log(3, "Round %u : sendCount=%u, recvCount=%u, messageRound=%u", deviceState->round, message->sendCount, message->recvCount, message->round);
        
        assert(deviceState->round==message->round);

        deviceState->localRecvCount++;

        if(message->sendCount == message->recvCount+deviceState->localRecvCount){
            // We can only receive progress if _all_ nodes have sent a progress message,
            // so as soon as things balance it is finished

            handler_log(2, "Round %u complete", deviceState->round);

            deviceState->sumMaxDist += message->maxDistance;
            deviceState->sumSumDist += message->sumDistance;

            deviceState->roundComplete = true;
            deviceState->round++;            
        }

	    ]]></OnReceive>
	  </InputPin>

      <OutputPin name="term_request" messageTypeId="term_request">
        <OnSend><![CDATA[
        assert(!deviceState->termInProgress);
        deviceState->termInProgress=1;
        deviceState->prevSendCount=deviceState->currSendCount;
        deviceState->prevRecvCount=deviceState->prevSendCount;
        ]]></OnSend>
      </OutputPin>
	  
	  <OutputPin name="begin_out" messageTypeId="begin">
	    <OnSend><![CDATA[
	    assert(deviceState->roundComplete);

        deviceState->roundComplete=false;
        deviceState->localRecvCount=0;

        message->round = deviceState->round;

        if(deviceState->round >= deviceProperties->node_count){
            handler_log(1, "sumMaxDist=%u, refSumMaxDist=%u", deviceState->sumMaxDist, deviceProperties->refSumMaxDist);
            handler_log(1, "sumSumDist=%u, refSumSumDist=%u", deviceState->sumSumDist, deviceProperties->refSumSumDist);

            auto sumMaxDistOk = deviceState->sumMaxDist==deviceProperties->refSumMaxDist;
            assert(sumMaxDistOk);
            auto sumSumDistOk = deviceState->sumSumDist==deviceProperties->refSumSumDist;
            assert(sumSumDistOk);

            *doSend = false;
            handler_exit(sumMaxDistOk && sumSumDistOk ? 0 : -1);
        }
	    ]]></OnSend>
	  </OutputPin>

      </DeviceType>
	  
	  </DeviceTypes>
	</GraphType>
</Graphs>

