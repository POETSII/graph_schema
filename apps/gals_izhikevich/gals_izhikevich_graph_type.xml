<?xml version="1.0"?>
<Graphs xmlns="http://TODO.org/POETS/virtual-graph-schema-v1">
  <GraphType id="gals_izhikevich">
    <!-- This is not a true simulation as it does not guarantee that spikes will
	 be integrated in the same time interval. An unfair orchestrator could
	 also spin some neurons ahead, as each neuron only depends on the total
	 number of updates, not on whether it is received an update from each
	 neuron.
    -->


    <Properties>
    </Properties>

    <SharedCode><![CDATA[
    uint32_t urng(uint32_t &state)
    {
      state = state*1664525+1013904223;
      return state;
    }

    // Worlds crappiest gaussian
    float grng(uint32_t &state)
    {
      uint32_t u=urng(state);
      int32_t acc=0;
      for(unsigned i=0;i<8;i++){
        acc += u&0xf;
        u=u>>4;
      }
      // a four-bit uniform has mean 7.5 and variance ((15-0+1)^2-1)/12 = 85/4
      // sum of four uniforms has mean 8*7.5=60 and variance of 8*85/4=170
      const float scale=0.07669649888473704; // == 1/sqrt(170)
      return (acc-60.0f) * scale;
    }

    ]]></SharedCode>

    <MessageTypes>
      <MessageType id="__init__">
	<!-- This doesn't have any properties -->
      </MessageType>

      <MessageType id="synapse">
		<Message>
		  <Scalar type="int8_t" name="fired" />
		</Message>
      </MessageType>

    </MessageTypes>

    <DeviceTypes>
      <DeviceType id="neuron">
		<Properties>
		  <Scalar type="uint32_t" name="seed" />

		  <Scalar type="float" name="a" default="0" />
		  <Scalar type="float" name="b" default="0" />
		  <Scalar type="float" name="c" default="0" />
		  <Scalar type="float" name="d" default="0" />
		  <Scalar type="float" name="Ir" />

		  <Scalar type="uint32_t" name="fanin" />
		</Properties>

		<State>
		  <Scalar type="uint32_t" name="rng" />

		  <Scalar type="float" name="u" />
		  <Scalar type="float" name="v" />

		  <Scalar name="I" type="float" />
		  <Scalar name="Icount" type="uint32_t" />

		  <Scalar name="pendingFires" type="uint32_t" />

		  <Scalar name="rts" type="uint32_t" />
		</State>

		<InputPort name="__init__" messageTypeId="__init__">

		  <OnReceive><![CDATA[
		  deviceState->rng = deviceProperties->seed;

		  deviceState->v=-65;
		  deviceState->u=deviceProperties->b * deviceState->v;

		  deviceState->I=deviceProperties->Ir * grng(deviceState->rng);
		  deviceState->Icount=0;

		  deviceState->pendingFires=1;

		  deviceState->rts = RTS_FLAG_fire;
		  ]]>
		  </OnReceive>
		</InputPort>

		<OutputPort name="fire" messageTypeId="synapse">
		  <OnSend><![CDATA[
		  assert(deviceState->pendingFires > 0);

		  float &v=deviceState->v;
		  float &u=deviceState->u;
		  float &I=deviceState->I;

		  v=v+0.5*(0.04*v*v+5*v+140-u+I); // step 0.5 ms
		  v=v+0.5*(0.04*v*v+5*v+140-u+I); // for numerical
		  u=u+deviceProperties->a*(deviceProperties->b*v-u);                 // stability

		  message->fired = v >= 30;
		  if(message->fired){
			v=deviceProperties->c;
			u += deviceProperties->d;
		  }

		  deviceState->I=deviceProperties->Ir * grng(deviceState->rng);
		  deviceState->Icount=0;

		  deviceState->pendingFires--;

		  handler_log(3, "fanin=%d", deviceProperties->fanin);
		  ]]></OnSend>
		</OutputPort>

		<InputPort name="input" messageTypeId="synapse">
			<Properties>
			<Scalar type="float" name="weight" />
			</Properties>


		  <OnReceive><![CDATA[
		  deviceState->Icount++;
		  if(message->fired){
			deviceState->I += edgeProperties->weight;
			}

		  if(deviceState->Icount == deviceProperties->fanin){
			deviceState->pendingFires++;
			deviceState->Icount=0;
		  }
		  handler_log(3, "Icount = %d, fanin=%d", deviceState->Icount, deviceProperties->fanin);
		  ]]></OnReceive>
		</InputPort>

		<ReadyToSend><![CDATA[
		*readyToSend = (deviceState->pendingFires > 0) ? RTS_FLAG_fire : 0;
		]]></ReadyToSend>
      </DeviceType>

    </DeviceTypes>
  </GraphType>
</Graphs>
