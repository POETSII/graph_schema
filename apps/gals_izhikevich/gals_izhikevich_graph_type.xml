<?xml version='1.0' encoding='ASCII'?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v3">
  <GraphType id="gals_izhikevich">
    <Properties>
      <Scalar name="max_t" type="uint32_t" />
    </Properties>
    <SharedCode><![CDATA[
    #ifdef POETS_LEGACY_HAS_HANDLER_EXIT
    #define _do_handler_exit(code) handler_exit(code)
    #else
    #define _do_handler_exit(code) ((void)0)
    #endif

    #define fake_handler_exit(code) \
    { \
        if((code)==0){ \
            handler_log(0, "_HANDLER_EXIT_SUCCESS_9be65737_"); \
        }else{ \
            handler_log(0, "_HANDLER_EXIT_FAIL_9be65737_"); \
        } \
        _do_handler_exit(code); \
    }

    uint32_t urng(uint32_t &state)
    {
      state = state*1664525+1013904223;
      return state;
    }

    // Worlds crappiest gaussian
    float grng(uint32_t &state)
    {
      uint32_t u=urng(state);
      int32_t acc=0;
      for(unsigned i=0;i<8;i++){
        acc += u&0xf;
        u=u>>4;
      }
      // a four-bit uniform has mean 7.5 and variance ((15-0+1)^2-1)/12 = 85/4
      // sum of four uniforms has mean 8*7.5=60 and variance of 8*85/4=170
      const float scale=0.07669649888473704; // == 1/sqrt(170)
      return (acc-60.0f) * scale;
    }

    ]]></SharedCode>
    <MessageTypes>
      <MessageType id="synapse">
        <Message>
          <Scalar name="fired" type="int8_t"/>
        </Message>
      </MessageType>
    </MessageTypes>
    <DeviceTypes>
      <DeviceType id="neuron">
        <Properties>
          <Scalar name="seed" type="uint32_t"/>
          <Scalar name="a" type="float" default="0.0"/>
          <Scalar name="b" type="float" default="0.0"/>
          <Scalar name="c" type="float" default="0.0"/>
          <Scalar name="d" type="float" default="0.0"/>
          <Scalar name="Ir" type="float"/>
          <Scalar name="fanin" type="uint32_t"/>
        </Properties>
        <State>
          <Scalar name="rng" type="uint32_t"/>
          <Scalar name="u" type="float"/>
          <Scalar name="v" type="float"/>
          <Scalar name="I" type="float"/>
          <Scalar name="Icount" type="uint32_t"/>
          <Scalar name="pendingFires" type="uint32_t"/>
          <Scalar name="rts" type="uint32_t"/>
          <Scalar name="t" type="uint32_t"/>
        </State>
        <OnInit><![CDATA[
		  deviceState->rng = deviceProperties->seed;

		  deviceState->v=-65;
		  deviceState->u=deviceProperties->b * deviceState->v;

		  deviceState->I=deviceProperties->Ir * grng(deviceState->rng);
		  deviceState->Icount=0;

		  deviceState->pendingFires=1;

		  deviceState->rts = RTS_FLAG_fire;
		  
		  ]]></OnInit>
        <InputPin name="input" messageTypeId="synapse">
          <Properties>
            <Scalar name="weight" type="float"/>
          </Properties>
          <OnReceive><![CDATA[
		  deviceState->Icount++;
		  if(message->fired){
			deviceState->I += edgeProperties->weight;
			}

		  if(deviceState->Icount == deviceProperties->fanin){
			deviceState->pendingFires++;
			deviceState->Icount=0;
		  }
		  handler_log(3, "Icount = %d, fanin=%d", deviceState->Icount, deviceProperties->fanin);
		  ]]></OnReceive>
        </InputPin>
        <OutputPin name="fire" messageTypeId="synapse">
          <OnSend><![CDATA[
		  assert(deviceState->pendingFires > 0);

		  float &v=deviceState->v;
		  float &u=deviceState->u;
		  float &I=deviceState->I;

		  v=v+0.5*(0.04*v*v+5*v+140-u+I); // step 0.5 ms
		  v=v+0.5*(0.04*v*v+5*v+140-u+I); // for numerical
		  u=u+deviceProperties->a*(deviceProperties->b*v-u);                 // stability

		  message->fired = v >= 30;
		  if(message->fired){
			v=deviceProperties->c;
			u += deviceProperties->d;
		  }

		  deviceState->I=deviceProperties->Ir * grng(deviceState->rng);
		  deviceState->Icount=0;

		  deviceState->pendingFires--;

		  handler_log(3, "fanin=%d", deviceProperties->fanin);

      deviceState->t++;
      if(deviceState->t > graphProperties->max_t){
        *doSend=0;
        fake_handler_exit(0);
      }
		  ]]></OnSend>
        </OutputPin>
        <ReadyToSend><![CDATA[
		*readyToSend = (deviceState->pendingFires > 0) ? RTS_FLAG_fire : 0;
		]]></ReadyToSend>
      </DeviceType>
    </DeviceTypes>
  </GraphType>
</Graphs>
