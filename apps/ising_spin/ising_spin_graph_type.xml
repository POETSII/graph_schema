<?xml version='1.0' encoding='ASCII'?>
<Graphs xmlns="https://poets-project.org/schemas/virtual-graph-schema-v3">
  <GraphType xmlns="https://poets-project.org/schemas/virtual-graph-schema-v3" id="ising_spin">
  <Properties>
    <Scalar name="endTime" type="float" default="10.0"/>
    <Scalar name="width" type="uint32_t"/>
    <Scalar name="height" type="uint32_t"/>
    <Array name="probabilities" length="10" type="float"/>
  </Properties>
  <MetaData>"nativeDimension": 2</MetaData>
  <SharedCode><![CDATA[
        #ifdef POETS_LEGACY_HAS_HANDLER_EXIT
        #define _do_handler_exit(code) handler_exit(code)
        #else
        #define _do_handler_exit(code) ((void)0)
        #endif

        #define fake_handler_exit(code) \
        { \
            if((code)==0){ \
                handler_log(0, "_HANDLER_EXIT_SUCCESS_9be65737_"); \
            }else{ \
                handler_log(0, "_HANDLER_EXIT_FAIL_9be65737_"); \
            } \
            _do_handler_exit(code); \
        }
]]></SharedCode>
  <SharedCode><![CDATA[

  #ifndef __OPENCL_VERSION__
	#include <cmath>
  #endif

    uint32_t urng(uint32_t *state)
    {
      *state = (*state)*1664525+1013904223;
      return *state;
    }

    uint32_t rng_init(uint32_t x, uint32_t y)
    {
      y=(x<<16)^y;
      for(unsigned i=0;i<10;i++){
        y^=(y<<13); y^=(y>>17); (y^=(y<<5));
      }
      return y;
    }

    float frng(uint32_t *state)
    { return urng(state)*2.328306400e-10f; }

    float erng(uint32_t *state)
    { return -log(frng(state)); }

    void chooseNextEvent(const float *probabilities, uint32_t *rng, int32_t *spins, float *times)
    {
      int sumStates=0;
      for(unsigned i=1; i<5; i++){ // Only sum neighbours
        sumStates+=spins[i];
      }

      unsigned index=(sumStates+4)/2 + 5*(spins[0]+1)/2;
      float prob=probabilities[index];

      if( frng(rng) < prob){
        spins[0] *= -1; // Flip
      }
      times[0] += erng(rng);
    }

    ]]></SharedCode>
  <MessageTypes>
    <MessageType id="__print__"/>
    <MessageType id="update">
      <Message>
        <Scalar name="time" type="float" default="0.0"/>
        <Scalar name="spin" type="uint32_t"/>
      </Message>
    </MessageType>
  </MessageTypes>
  <DeviceTypes>
    <DeviceType id="cell">
      <Properties>
        <Scalar name="x" type="uint32_t"/>
        <Scalar name="y" type="uint32_t"/>
      </Properties>
      <State>
        <Scalar name="rng" type="uint32_t"/>
        <Array name="spins" length="5" type="int32_t"/>
        <Array name="times" length="5" type="float"/>
        <Scalar name="spin" type="int32_t"/>
        <Scalar name="lastFlipTime" type="float"/>
        <Scalar name="rts" type="uint32_t"/>
      </State>
      <OnInit><![CDATA[
	  // Initialise RNG and choose random starting spin
	  uint32_t seed;
	  int x=deviceProperties->x, y=deviceProperties->y;
	  int W=graphProperties->width, H=graphProperties->height;

	  seed=rng_init( x, (y+H-1)%H );
	  deviceState->spins[1]=(urng(&seed)>>31) ? +1 : -1;
	  deviceState->times[1]=erng(&seed);

	  seed=rng_init( (x+1)%W, y );
	  deviceState->spins[2]=(urng(&seed)>>31) ? +1 : -1;
	  deviceState->times[2]=erng(&seed);

	  seed=rng_init( x, (y+1)%H );
	  deviceState->spins[3]=(urng(&seed)>>31) ? +1 : -1;
	  deviceState->times[3]=erng(&seed);

	  seed=rng_init( (x+W-1)%W, y );
	  deviceState->spins[4]=(urng(&seed)>>31) ? +1 : -1;
	  deviceState->times[4]=erng(&seed);

	  // Final one is this node
	  seed=rng_init( x, y );
	  deviceState->spins[0]=(urng(&seed)>>31) ? +1 : -1;
	  deviceState->times[0]=erng(&seed);
	  deviceState->rng=seed; // Store the rng state back

	  deviceState->spin=deviceState->spins[0];
	  deviceState->lastFlipTime=0; // Bit redundant

	  // We now have perfect knowledge of our neighbourhood, and
	  // when they are planning to fire.

	  handler_log(3, "next_t = %g, next_spin = %d", deviceState->times[0], deviceState->spins[0]);

	  deviceState->rts = (deviceState->times[0] >= graphProperties->endTime) ? 0 : RTS_FLAG_out;
	  for(unsigned i=1; i<5; i++){
	    handler_log(3, "   times[%d] = %g", i, deviceState->times[i]);
	    if(deviceState->times[0] >= deviceState->times[i]){
              deviceState->rts=0; // We are not the earliest cell in neighbourhood
	    }
	  }

	  ]]></OnInit>
      <InputPin name="__print__" messageTypeId="__print__">
        <OnReceive><![CDATA[
	  handler_log(0, "ready=%x, times={%g,%g,%g,%g,%g}",
	    deviceState->rts,
	    deviceState->times[0], deviceState->times[1], deviceState->times[2], deviceState->times[3], deviceState->times[4]);
	  ]]></OnReceive>
      </InputPin>
      <InputPin name="in" messageTypeId="update">
        <Properties>
          <Scalar name="direction" type="uint32_t"/>
        </Properties>
        <OnReceive><![CDATA[

	  if(message->time >= deviceState->times[edgeProperties->direction]){
  	    deviceState->spins[edgeProperties->direction]=message->spin;
	    deviceState->times[edgeProperties->direction]=message->time;

	    handler_log(4, "from %d, new_time = %g, new_spin  %d", edgeProperties->direction, message->time, message->spin);
	  }

	  deviceState->rts = RTS_FLAG_out;

	  for(unsigned i=1; i<5; i++){
            if(deviceState->times[i] < deviceState->times[0]){
	      handler_log(4, "  time[%d] = %g < time[0] = %g", i, deviceState->times[i], deviceState->times[0]);
	      deviceState->rts = 0;
	    }
	  }

	  ]]></OnReceive>
      </InputPin>
      <OutputPin name="out" messageTypeId="update" indexed="false">
        <OnSend><![CDATA[
	  deviceState->rts=0;


	  // Check if simulation has finished. If so do nothing
	  if(deviceState->times[0] >= graphProperties->endTime){
			*doSend=false;
			deviceState->rts=0;
			fake_handler_exit(0);
	  }

	  float prevTime=deviceState->times[0];
	  int prevSpin=deviceState->spins[0];
          chooseNextEvent(graphProperties->probabilities, &deviceState->rng, deviceState->spins, deviceState->times);
          message->spin = deviceState->spins[0];
	  message->time = deviceState->times[0];

	  if(prevSpin != deviceState->spins[0]){
	    deviceState->lastFlipTime = prevTime;
	  }
	  deviceState->spin=deviceState->spins[0];

          handler_log(3, "prev_t = %g, next_t = %g, curr_spin = %d", prevTime, deviceState->times[0], deviceState->spins[0]);

	  deviceState->rts = RTS_FLAG_out;
	  for(unsigned i=1; i<5; i++){
            if(deviceState->times[0] > deviceState->times[i]){
	            handler_log(4, "  time[%d] = %g < time[0] = %g", i, deviceState->times[i], deviceState->times[0]);
	            deviceState->rts = 0;
            }
	    }
	    handler_log(3, "sendAgain = %x", deviceState->rts);
	  ]]></OnSend>
      </OutputPin>
      <ReadyToSend><![CDATA[
	*readyToSend = deviceState->rts;
	]]></ReadyToSend>
    </DeviceType>
  </DeviceTypes>
</GraphType>
</Graphs>
