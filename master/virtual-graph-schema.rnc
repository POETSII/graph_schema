datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

default namespace = "http://TODO.org/POETS/virtual-graph-schema-v0"

grammar {

  start = element Graph{
    ( graphType | graphTypeReference )*,
    graphInstance*,
    graphSnapshot*
  }

  graphType =
    element GraphType {
      ## Identifier or name for the graph.
      attribute id { string }

      &

      ## Gives the native dimension of the problem, if there is one. Zero if not set of if not applicable.
      ## For example in a 2D heat equation this would be 2.
      attribute nativeDimension { xsd:integer } ?

      &

      element SharedCode {
        text
      } ?

      &

      ## Global properties that are shared with all nodes at run-time. read-only.
      element Properties {
        typedDataSpec *
      } ?

      &

      ## Establishes the different types of edges that could exist in the graph,
      ## and any properties or state associated with each edge type
      element EdgeTypes {
        edgeType *
      }

      &

      ## This establishes the shapes of devices, though not the internals.
      element DeviceTypes {
        deviceType *
      }
   }

   graphTypeReference =
     ## This is used when we want the graph type to live in a different file, or
     ## to use a graph-type that is defined by a software provider
     element GraphTypeReference {
       attribute id { string},

       ## This may be missing, in which case it is assumed some other mechanism will
       ## connect it up
       attribute src { string } ?
     }

   graphInstance =
     element GraphInstance {

      attribute id { string },

      ## The graph type must have been declared using either a GraphType or a GraphTypeReference
      attribute graphTypeId { string },

      element Properties {
      	typedDataValue
      } ?,

      element DeviceInstances {
        deviceInstance *
      },
      element EdgeInstances {
        edgeInstance *
      }
    }

  edgeType =
    ## An edge type captures a type of communication that could happen between ports
    element EdgeType {
      ## Must be unique amongst all edge types
      attribute  id { string },

      ## The type of messages that are sent over this edge. This may not exist
      ## (e.g. if it is only a pulse)
      element Message {
        typedDataSpec *
      } ?,

      ## Indicates read-only properties associated with each edge. This will be
      ## delivered along-side messages which arrive along that edge
      ## An edge may have no properties, in which case this element will not exist
      element Properties {
        typedDataSpec *
      } ?,

      ## Indicates mutable properties associated with an edge.
      ## TODO : This has unclear semantics (which is why I (DBT) was hesitant about it).
      ##        When is the state modifiable, is it _only_ when a message arrives over
      ##        that edge? Should there be state associated with outgoing edges?
      element State {
        typedDataSpec *
      } ?
    }

  deviceType =
    ## A device type captures a piece of structure and functionality that can
    ## be instantiated within the graph. All devices of the same type are identical
    ## except for the functionality they have.
    ##
    ## The number of ports must be fixed, but we allow a variable number of
    ## edges to enter or leave a node. Alongside the edge properties and
    ## edge state this provides storage that scales with the number of edges.
    ##
    ## Messages are delivered to the device in any order, and a device has no
    ## way of avoiding them.
    ##
    ## Devices can request a send on a particular port NAME by setting requestSend_NAME.
    ## The value of requestSend_NAME will persist between calls until a send is
    ## achieved on a particular port.
    element DeviceType {
      ## Must be unique amongst all device types
      attribute id { string },

      ## Read-only properties that could be specified on the device. This element
      ## may not appear if the device has no properties. There may be default
      ## values specified for some or all components of the properties.
      element Properties { typedDataSpec } ?,

      ## Mutable properties attached to the device. In principle this element might
      ## not appear, if the device has no state (I suppose all the mutable state could
      ## be in the edge properties).
      element State { typedDataSpec * } ?,

      ## Zero or more input ports that appear on the device type.
      element InputPort {
        ## Name of the port, must be unique within the device type
        attribute name { string },

        ## Identifies the edge type for this port (specifying properties+state space)
	## A port can only be connected to an edge of the same type (not just structurally,
	## they must have the same edgeTypeId)
	attribute edgeTypeId { string },

        ## Event handler for when a message arrives on this device. The body will
	## be a fragment of C. It should probably be wrapped in a CDATA section,
	## but that is up to you. The code should be a statement or sequence of
	## statements, and does not contain any function header.
	##
        ## Rationale: why a fragment? It forces the implementer to not use globals etc.,
	## and means we have control over the type names of the various structs.
	## TODO: I (DBT) am not convinced that using fragments is a good idea (this
	## is true even as I specify it). Using a reference to functions in the C
	## code would make much more sense.
	##
	## Variables which will be in scope are:
	##   graphProperties : Read-only pointer to the graph properties
	##   deviceProperties : Read-only pointer to the device state
	##   deviceState : Mutable pointer to the device state
	##   edgeProperties : Read-only pointer to the edge state
	##   edgeState : Mutable pointer to the edge state
	##   message : Read-only pointer to the message payload
	##   requestSend[] : an array of booleans which requests sending on the named port (one bool for each output port)
	element OnReceive {
	  string
	}
      } *,

      ## Zero or more output ports that appear on the device type.
      element OutputPort {
        ## Name of the port, must be unique within the device type
        attribute name { string },

        ## Identifies the edge type for this port (specifying properties+state space)
	## A port can only be connected to an edge of the same type (not just structurally,
	## they must have the same edgeTypeId)
	attribute edgeTypeId { string },

        ## Event handler for sending a message on this device. The body will
	## be a fragment of C. It should probably be wrapped in a CDATA section,
	## but that is up to you. The code should be a statement or sequence of
	## statements, and does not contain any function header.
	##
	## Variables which will be in scope are:
	##   graphProperties : Read-only pointer to the graph properties
	##   deviceProperties : Read-only pointer to the device properties
	##   deviceState : Mutable pointer to the device state
	##   requestSend[] : an array of  booleans which requests sending on the named port (one bool for each port)
	##   message : A mutable pointer to payload associate with the edge
	##   cancelSend : mutable boolean which is true by default. Set to false to cancel the send.
	##
	## Whenever requestSend[index] is high, then eventually this handler will get
	## executed. By default, requestSend[index] will be set low before the handler
	## executes, but the handler can set it high again if it wants.
	element OnSend { string }
      } *
    }

  deviceInstance =
    element DevI {
      ## A unique string
      attribute id { string },

      ## Links to a previously declared device type
      attribute type { string },

      ## If the device has a natural location (e.g. in the problem space), then this gives it.
      ## The format is decimal values seperated by commas. The number of values should follow
      ## the native dimension of the graph type.
      attribute nativeLocation { string } ?,

      ## Read-only properties associated with this device instance.
      ## This element must not exist if the device type has no properties
      ## This element may not exist if the property has a (complete) default value
      element P { typedDataValue } ?
    }

  edgeInstance =
    ## The edgeTypeId can be inferred from the types of the ports,
    ## and it is worth explicitly checking they have the same port on
    ## load, so it is not included here.
    element EdgeI {
      ((
        attribute dstDeviceId   { xsd:string },
        attribute dstPortName   { xsd:string },
        attribute srcDeviceId   { xsd:string },
        attribute srcPortName   { xsd:string }
      )
      |
      (
	## A string of the form "dstDeviceId:dstPortName-srcDeviceId:srcPortName"
      	attribute path { xsd:string }
      )),

      ## Read-only properties associated with this edge instance
      ## This element can only exist if the edge has properties.
      ## This edge may not exist if all properties have a default
      element P { typedDataValue } ?,

      ## Mutable properties associated with this edge instance.
      ## This element can only exist if the edge has state
      ## This edge may not exist if all parts of the state have a default.
      element S { typedDataValue } ?
    }

  ## A typed data specification consists of one or more elements
  typedDataSpec = typedDataSpecElement +

  typedDataSpecElement =
  ## This represents the prototype for a typed piece of data, along with
  ## the default values
  (
    element Scalar {
      attribute type { "int32_t" | "uint32_t" | "float" | "bool" },
      attribute name { string },
      attribute value { string } ?
    }
    |
    element Tuple {
        attribute name { text },
        typedDataSpecElement +
    }
    |
    element Array {
        attribute name { text },
	attribute length { text },

        ## TODO : this should be made more general. Currently only arrays of scalars are allowed
	attribute type { "int32_t" | "uint32_t" | "float" | "bool" }
    }
  )

  ## Typed data is encoded in plain text, rather than using XML in order
  ## to keep ADB happy.
  ## The encoding is simply "name":value, with name-value pairs seperated by commas.
  ##
  ## Tuples are encoded as "name":{ "sub-name":value, ... }
  ## Arrays are encoded as "name":[value,value,...]
  ##
  ## Any relationship to JSON is entirely intentional. I realise there is an irony
  ## in using XML on the outside and JSON on the inside - personally I (DBT) prefer the
  ## self-checking structure of XML at the large scale.
  typedDataValue =
    text

  graphSnapshot = element GraphSnapshot {
    attribute graphId  { string },

    ## The id of the overall run that the snapshot comes from
    attribute sequenceId  { string },

    ## The integer sequence number within the run
    attribute sequenceNumber  { xsd:integer },

    ## The "world-time" of the simulator, whatever that may mean
    attribute worldTime { xsd:float },

    element DevS {
    	    attribute id  { string },

            ## A hexadecimal value that encodes whether each port is ready to send.
            ## The LSB encodes the port with index 0, and so on
            attribute rts { string },


          element S { typedDataValue } ?
    },

    element EdgeS {
    	    # id of the form:  "dstDeviceId:dstPortName-srcDeviceId:srcPortName"
    	    attribute id  { string },

	    # How many times has this edge fired?
	    attribute firings { xsd:integer } ? ,

	    element S { typedDataValue } ? ,

	    ## Any messages that are in flight
	    element Q {
	    	    element M {
                  typedDataValue
                } +
	    } ?
    }

  }

}
